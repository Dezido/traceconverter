[directories]
raw_traces_dir=D:/Documents/Bachelorarbeit/Tracesammlung/raw traces
converted_traces_dir=D:/Documents/Bachelorarbeit/Tracesammlung/converted traces
tracedata_dir=D:/Documents/Bachelorarbeit/Tracesammlung/profido input files/

[files]
trace_file_suffix=_sf.json
tracedata_file_suffix=_dat.trace

[fonts]
default_font_text_widget=TkDefaultFont

[entries]
entry_width=85

#preparation tab
default_date_format_entry_pft=
default_float_format_entry_ett=%e

#convert tab
default_columns_entry_ctt=
default_trace_source_entry_ctt=
default_description_entry_ctt=
default_tracedatadescription_entry_ctt=
default_username_entry_ctt=Dennis Ziebart
default_additional_information_entry_ctt=
default_filename_entry_ctt=

[listbox]
listbox_width=75
listbox_height=25

[treeview]
filter_treeview_height=20

[tooltips]
# Prepare File tab
browse_file_button_pft=Select a file to prepare
remove_rows_label_pft=Amount of rows
remove_rows_button_pft=Removes the first N rows from the selected file
add_header_label_pft=New header of the file
add_header_button_pft=Add the new header to the selected file
timestamp_format_label_pft=Format strings for timestamp entries.
  Each column needs an own string. Separate multiple strings by semicolon.
  Check strptime format codes documentation for additional info.
  Example entry for two columns containing entries like 2022-03-17 14:05:57  %Y-%m-%d %H:%M:%S;%Y-%m-%d %H:%M:%S
timestamp_columns_label_pft=Indexes of columns to be converted to unix time.
  Separate multiple strings by semicolon
calculate_timestamp_button_pft=Transform timestamps to unix time
columns_wise_difference_label_pft=Two column indexes separated by semicolon.
  For example to subtract column 4 from column 2 enter 2;4
columns_wise_difference_result_column_label_pft=Name of the result column
  If already present, the column will be overwritten, otherwise appended at the end
columns_wise_difference_button=Save the column-wise difference
row_wise_difference_label_pft=Index of the column the row-wise difference shall be calculated for
row_wise_difference_result_column_label_pft=Name of the result column
  If already present, the column will be overwritten, otherwise appended at the end
row_wise_difference_button=Save the row-wise difference
delimiter_label_pft=Delimiter used to separate the entries. Pandas delimiters (including regular expressions) are valid entries.
  For example \s+ for one or more whitespaces
transform_button_pft=Transform the selected file to CSV format.
  Result is saved to raw traces' directory (specified in config file)
keep_header_checkbutton_pft=If checked the first line of selected file will be the header of the CSV file
header_label_pft=Header for CSV file. If entry is not empty it will overwrite the header of the trace

# convert tab
original_tracefile_label_ctt=Select a trace you want to convert
columns_label_ctt=Column indexes of the original trace containing the tracedata.
  Separate multiple strings by semicolon
source_label_ctt=From which source does the trace originate
tracedescription_label_ctt=Description of the whole trace
tracedatadescription_label_ctt=Description for each selected tracedata column.
  Separate multiple strings by semicolon
username_label_ctt=Your id or name
additional_information_label_ctt=Any additional information about the trace you want to save. This entry is optional.
  Linebreaks and '\n' inside the text will be ignored since they can't be displayed in a JSON file.
  Semicolon serves as a delimiter that splits the text into different entries in an array.
  For example
  First line of text;Second line of text -> 
  ["First line of text",
  "Second line of text"]

result_filename_label_ctt=Filename for the converted trace
tracedata_checkbutton= If checked tracedata will be extracted after conversion, so it can be used with ProFiDo
tracedata_filename_label_ctt=Filename for tracedata
browse_file_button=Select a file to convert
convert_button_ctt=Convert the selected trace to standard format
statistics_format_string=Format string for statistical characteristics. Python format strings are valid entries.
  For example e or E for scientific notation. Can be left empty. https://docs.python.org/3/library/string.html lists available presentation types.

# filter tab
selected_traces_label_ftt=Traces to be filtered
browse_files_button_ftt=Select traces to filter
filter_button_ftt=Filter traces that satisfy the condition
expression_label_ftt=Boolean expression with statistical characteristic for filtering the traces.
  Use mean, median, skew, kurtosis, autocorrelation and variance to reference the characteristic. Python syntax is required.
  Example: (mean > 20 or median > mean) and autocorrelation > 0.7

# extract tracedata tab
converted_trace_label_ett=Trace in standard format from which the data is to be extracted
browse_trace_button_ett=Select a trace to extract the tracedata
extract_tracedata_button_ett=Extract the tracedata for usage in ProFiDo
tracedata_filename_label_ett=Filename for tracedata
float_format_label_ett=Format string for float numbers. No effect on integers.
  Valid options and more information can be found in in the pandas.DataFrame.to_csv documentation under float_format.
  Example are %E or %f

#validation tab
browse_file_button_vtt=Select a trace to validate
validate_statistics_button_vtt=Compare stored and newly calculated statistics with relative tolerance
relative_tolerance_vtt=Relative tolerance for statistics comparison. Enter a float between 0 and 1
validate_hash_button_vtt=Compare stored with newly calculated hash value
restore_traceheader_button_vtt=Compute and overwrite statistics and hash value

